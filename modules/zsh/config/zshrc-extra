############################################################
#################### NOTE ##################################
############################################################
#
# - In the following cases, in favor of `alias` rather than `function`:
#   - Claim default options for the commands.
#   - Use the abbreviation in interactive mode most of the time.
# - In the following cases, in favor of `function` rather than `alias`:
#   - Complex routines.
#   - Need to be reused even when writing shell scripts.
# - Use `word ... () { list }` to define functions as possible, which is more compatible.
# - Do not override commands via aliasing unless you want to abandon the previous version.
#   It prevent the nesting of aliasing, and is not what you expect at most of the time.
# - Use `#` as the leading character of descriptions, and `##` of commented codes.
# - Any UI-related scripts should be loaded immediately; other scripts can be deferred with __try_defer.
#

# See https://www.emacswiki.org/emacs/TrampMode Tramp hangs #3
[[ "$TERM" == "dumb" ]] && unsetopt zle && PS1="$ " && return

#################### Function Utils ########################

if [[ -s "$ZDOTDIR/.zsh-plugins/zsh-defer/zsh-defer" ]]; then
    autoload -Uz $ZDOTDIR/.zsh-plugins/zsh-defer/zsh-defer
    __try_defer() {
        zsh-defer "$@"
    }
else
    print -u2 "zsh: cannot autoload zsh-defer function, the shell setup may be incomplete"
    __try_defer() {
        builtin eval "$@"
    }
fi

__load_plugin() {
    emulate -L zsh

    local plugin
    local defer=1

    while (( $# )); do
        case $1 in
            --no-defer)
                defer=0
                ;;
            *)
                plugin="$1"; break
                ;;
        esac
        shift
    done

    if [[ -s "$ZDOTDIR/.zsh-plugins/$plugin/$plugin.plugin.zsh" ]]; then
        if [[ $defer -eq 0 ]]; then
            source "$ZDOTDIR/.zsh-plugins/$plugin/$plugin.plugin.zsh"
        else
            __try_defer source "$ZDOTDIR/.zsh-plugins/$plugin/$plugin.plugin.zsh"
        fi
    else
        echo "zsh: cannot load plugin $plugin"
    fi
}

################### General Configurations #################

# redirect shouldn't overwrite a existing file
setopt noclobber

# allow comments when interactive
setopt interactivecomments

# ^S/^Q has no effect on start/stop the flow
setopt noflowcontrol

## History command configuration
setopt hist_verify            # show command with history expansion to user before running it
alias history='fc -i -l 1'    # -i = timestamp

alias e="$EDITOR"

#################### Directory #############################

# if a directory is placed as "command", `cd` to it
setopt autocd

setopt auto_pushd # pushd_ignore_dups
for ((i=1;i<=9;i+=1)); do alias $i="cd +$i"; done; unset i

# generated via https://geoff.greer.fm/lscolors
# GNU ls (included in coreutils) color
export LS_COLORS="di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"
# BSD ls color
export LSCOLORS="Gxfxcxdxbxegedabagacad"

# Enable colors when not piped
alias ls='ls --color=auto'

# -l: long listing format
# -a: all
# -A: almost all (except . and ..)
# -h: human-readable
alias l='ls -lAh'
alias ll='ls -lah'

# also enable completion color
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

#################### ZSH Line Editor #######################

# bindkey: \e == \E == ^[ == ESC, ^J == $'\C-'

# https://github.com/ohmyzsh/ohmyzsh/blob/fff073b55defed72a0a1aac4e853b165f208735b/lib/key-bindings.zsh#L5-L16
# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# BEGIN Duplicate the readline(3) and Emacs behavior. 8<

# select-word-style is a user-defined function that wraps word-chars and other
# settings to provide an easier interface to customize the ZLE word style.
autoload -U select-word-style
select-word-style bash

# Link `emacs' to `main' so that it's selected by default the next time ZLE starts.
bindkey -e

# precede the current command with `#` and then accept
bindkey -M emacs '^[#' pound-insert # M-#

# use ^X^E like bash
# create a widget with the same name so it can be invoke by ZLE
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M emacs '^X^E' edit-command-line

# magic-space: perform history expansion and insert a space
bindkey -M emacs ' ' magic-space

# list-choices: list possible completions for the current word.
bindkey -M emacs '^[?' list-choices

# duplicate bash alt-r (revert-line)
revert-line() {
    while zle .undo; do done
    zle .end-of-line
}
zle -N revert-line
bindkey -M emacs '^[r' revert-line

bindkey -M emacs '^w' kill-region

# >8 END Duplicate the readline(3) and Emacs behavior.

# https://github.com/ohmyzsh/ohmyzsh/blob/fff073b55defed72a0a1aac4e853b165f208735b/lib/key-bindings.zsh#L34-L51
# Start typing + [Up-Arrow] - fuzzy find history forward
if [[ -n "${terminfo[kcuu1]}" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search


  bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# Start typing + [Down-Arrow] - fuzzy find history backward
if [[ -n "${terminfo[kcud1]}" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search


  bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
fi

if [[ "$EDITOR" = *vi* ]]; then
    zstyle ':zle:edit-command-line' editor "$EDITOR" -c 'set ft=zsh'
else
    zstyle ':zle:edit-command-line' editor "$EDITOR"
fi

################### ZSH Completions #######################

# these two options allow completions start when the cursor is within the word
# and after completion, the cursor moves to the end of the word
# for example, a_long|_wordTAB -> a_long_long_long_word|
## setopt alwaystoend completeinword

# insert the first match immediately
## setopt menu_complete
## bindkey -M menuselect -r '^I'

setopt listpacked

# completion menu
zstyle ':completion:*:*:*:*:*' menu select

# completer
zstyle ':completion:*' completer _extensions _complete _approximate

# facility: progressively increases the number of errors
zstyle ':completion:*' max-errors 2

# show a message of completer
zstyle ':completion:*' show-completer  true

# case insensitive and allow
# substituted by the `_approximate` completer above
## zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]-_}={[:upper:][:lower:]_-}' 'r:|=*' 'l:|=* r:|=*'

# instead of showing "zsh: do you wish to see all the possiblities?", immediately list
zstyle ':completion:*' list-prompt  ''

# show prompt at the bottom during menu selection, if the list overflow the screen
zstyle ':completion:*' select-prompt ''

# emphasize the first ambiguous character
zstyle ':completion:*' show-ambiguity '1;34'

# display group descriptions
# https://github.com/Phantas0s/.dotfiles/blob/c01b080688c5e00d7b34529fc45dd46fe581275d/zsh/completion.zsh#L80-L83
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:descriptions' format '%F{cyan}-- %D %d --%f'
zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'

# don't group matches
zstyle ':completion:*' group-name ''

# make zsh understand docker option-stacking
# TODO try to add group name for docker completion somedays
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# tagged with `alias` will appear first
zstyle ':completion:*:*:-command-:*' group-order aliases builtins functions commands

# https://github.com/ohmyzsh/ohmyzsh/blob/8b2ce98578da743fbc4a208285f33744d6abd3cf/lib/completion.zsh#L47-L56
# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
        clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
        gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
        ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
        named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
        operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
        usbmux uucp vcsa wwwrun xfs '_*'

# use cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$ZDOTDIR/.zcompcache"

# setup new key bindings to navigate in menu selection
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'n' accept-and-infer-next-history # accept and trigger next completion
bindkey -M menuselect '^xi' vi-insert # C-x i: toggle interactive mode
# Prefixed by ".": call `zle ..`, which quits menuselect.
bindkey -M menuselect '^a' .beginning-of-line
bindkey -M menuselect '^e' .end-of-line
bindkey -M menuselect '^b' .backward-char
bindkey -M menuselect '^f' .forward-char
if (( $+terminfo[kcbt] )); then
    bindkey -M menuselect "${terminfo[kcbt]}" reverse-menu-complete # back-tap: select previous
fi

# scoll down one line
bindkey -M listscroll '^n' down-line-or-history

# zsh-users/zsh-completions: additional completions
__load_plugin --no-defer zsh-completions

# also show hidden files
_comp_options+=(globdots)

#################### Shortcuts #############################

alias :q="exit"

# pip3 install ... from_tuna
alias -g from_tuna="-i https://pypi.tuna.tsinghua.edu.cn/simple"

alias cmake-clean='cmake --build build --target clean'

# rsync
alias rsync-copy="rsync -avz --progress -h"
alias rsync-move="rsync -avz --progress -h --remove-source-files"
alias rsync-update="rsync -avzu --progress -h"
alias rsync-synchronize="rsync -avzu --delete --progress -h"

# prefer Inter syntax disassemble
alias objdumpi='objdump -M intel'

alias play='cd "$(mktemp -d)"'

#################### Misc. (Portable) ######################

# -i: prompt if need to overwrite an existing file
alias cp='cp -i'
alias mv='mv -i'

# Enable colors for grep
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'

alias less="less -iR"

# `-i`: smart case insensitive
export MANPAGER="less -sRi"

# bat
export BAT_THEME="gruvbox-dark"

# trash-cli
alias rm='echo "This is not the command you are looking for."; false'

# fzf
# Setup completion, keybindings for fzf.
# The funtion is defered until completion system is inited.
# PARAMS: FZF_SCRIPT_BASE
__fzf_setup() {
    local script_base="$1"
    () {
        builtin emulate -L zsh -o err_return
        source "$script_base/completion.zsh"
        source "$script_base/key-bindings.zsh"
    } || {
        print -u2 "[fzf-setup] cannot source init scripts"
        return 1
    }
    export FZF_DEFAULT_COMMAND="fd --type f --strip-cwd-prefix"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND="fd --type d --strip-cwd-prefix"
    # print tree structure in the preview window
    export FZF_ALT_C_OPTS="--preview 'tree -C {}'"
    _fzf_compgen_dir() {
        # cd **<TAB>
        fd --type d --hidden --follow --exclude ".git" --exclude "node_modules" . "$1"
    }
    _fzf_compgen_path() {
        # vim **<TAB>
        fd --hidden --follow --exclude ".git" --exclude "node_modules" . "$1"
    }
}

# fzf rebind TAB (^I), so it must be inited after `compinit` (defer it).
# zsh-defer can even defer the task when __fzf_setup isn't defined.
if [[ $options[zle] = on && -n "$FZF_SCRIPT_BASE" ]]; then
    __try_defer __fzf_setup "$FZF_SCRIPT_BASE"
fi

#################### Routines ##############################

# take functions


# mkcd is equivalent to takedir
function mkcd takedir() {
  mkdir -p $@ && cd ${@:$#}
}


function takeurl() {
  local data thedir
  data="$(mktemp)"
  curl -L "$1" > "$data"
  tar xf "$data"
  thedir="$(tar tf "$data" | head -n 1)"
  rm "$data"
  cd "$thedir"
}


function takegit() {
  git clone "$@"
  cd "$(basename ${1%%.git})"
}


function take() {
  if [[ $1 =~ ^(https?|ftp).*\.(tar\.(gz|bz2|xz)|tgz)$ ]]; then
    takeurl "$1"
  elif [[ $1 =~ ^([A-Za-z0-9]\+@|https?|git|ssh|ftps?|rsync).*\.git/?$ ]]; then
    takegit "$@"
  else
    takedir "$@"
  fi
}

most-often-use() {
    : ${1:=10}
    fc -l 1 | \
        awk '
{
    for (i = 2; i <= NF; i++) {
        # If the current field is the form of A=B, then skip
        where = match($i, /(^[a-zA-Z0-9_]+=.*$)|[()]/)
        if (where == 0) {
            cmd = $i
            if (match(cmd, /([#])|(^-)/) != 0)
                break
            # Remove the leading backslash.
            cmd = substr(cmd,match(cmd, /[^\\]*$/))
            total++
            count[cmd]++
            break
        }
    }
}
END {
    print "<ALL>", total, "100%"
    for (cmd in count)
        printf "%s %d %f%%\n", cmd, count[cmd], count[cmd]/total*100
}
' | sort -nr -k2,2 | head -n $(( "$1"+1 )) | column -t | nl -b p'^[^<]'
}

#################### ZSH plugins ###########################

# plugins that have no deps
plugins=(
    git
    zsh-syntax-highlighting
    zsh-autosuggestions
    vterm                       # vterm.plugin.zsh checks $INSIDE_EMACS
)

# plugins that are installed only when the deps are available
# [key, value] = [plugin, dep]
typeset -A __plugin_dep
__plugin_dep=(
    tmux tmux
    orb orb
)

() {
    for plugin ("${(k)__plugin_dep[@]}"); do
        (( $+commands[${__plugin_dep[$plugin]}] )) && plugins=($plugin $plugins)
    done
    ZSH_TMUX_AUTOCONNECT=false # never try to connect to previous session
    ZSH_TMUX_FIXTERM=false
    ZSH_TMUX_CONFIG="$XDG_CONFIG_HOME/tmux/tmux.conf"

    for plugin ($plugins); do
        __load_plugin "$plugin"
    done
    unset plugin plugins
}
